'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WebSocketGremlinConnection = function (_EventEmitter) {
  _inherits(WebSocketGremlinConnection, _EventEmitter);

  function WebSocketGremlinConnection(_ref) {
    var port = _ref.port;
    var host = _ref.host;

    _classCallCheck(this, WebSocketGremlinConnection);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WebSocketGremlinConnection).call(this));

    _this.open = false;

    _this.ws = new _ws2.default('ws://' + host + ':' + port);

    _this.ws.onopen = function () {
      return _this.onOpen();
    };
    _this.ws.onerror = function (err) {
      return _this.handleError(err);
    };
    _this.ws.onmessage = function (message) {
      return _this.handleMessage(message);
    };
    _this.ws.onclose = function (event) {
      return _this.onClose(event);
    };
    return _this;
  }

  _createClass(WebSocketGremlinConnection, [{
    key: 'onOpen',
    value: function onOpen() {
      this.open = true;
      this.emit('open');
    }
  }, {
    key: 'handleError',
    value: function handleError(err) {
      this.emit('error', err);
    }
  }, {
    key: 'handleMessage',
    value: function handleMessage(message) {
      this.emit('message', message);
    }
  }, {
    key: 'onClose',
    value: function onClose(event) {
      this.open = false;
      this.emit('close', event);
    }
  }, {
    key: 'sendMessage',
    value: function sendMessage(message) {
      var _this2 = this;

      this.ws.send(message, function (err) {
        if (err) {
          _this2.handleError(err);
        }
      });
    }
  }]);

  return WebSocketGremlinConnection;
}(_events.EventEmitter);

exports.default = WebSocketGremlinConnection;